-- CREATING SCHEMAS DATABASE
CREATE OR REPLACE WAREHOUSE VEHICLE_DEALER;
CREATE OR REPLACE DATABASE SALES_DB;
CREATE OR REPLACE SCHEMA YEAR_03_04_05;

-- CREATING INITIAL TABLE TO LOAD RAW DATA
CREATE TABLE "SALES_DB"."YEAR_03_04_05"."RAW_DATA" ( 
    ORDERNUMBER NUMBER(38, 0) , 
    QUANTITYORDERED NUMBER(38, 0) , 
    PRICEEACH NUMBER(38, 2) , 
    ORDERLINENUMBER NUMBER(38, 0) , 
    SALES NUMBER(38, 2) , 
    ORDERDATE VARCHAR , 
    STATUS VARCHAR , 
    QTR_ID NUMBER(38, 0) , 
    MONTH_ID NUMBER(38, 0) , 
    YEAR_ID NUMBER(38, 0) , 
    PRODUCTLINE VARCHAR , 
    MSRP NUMBER(38, 0) , 
    PRODUCTCODE VARCHAR , 
    CUSTOMERNAME VARCHAR , 
    PHONE VARCHAR , 
    ADDRESSLINE1 VARCHAR , 
    ADDRESSLINE2 VARCHAR , 
    CITY VARCHAR , 
    STATE VARCHAR , 
    POSTALCODE VARCHAR , 
    COUNTRY VARCHAR , 
    TERRITORY VARCHAR , 
    CONTACTLASTNAME VARCHAR , 
    CONTACTFIRSTNAME VARCHAR , 
    DEALSIZE VARCHAR 
); 

-- CREATING FILE FORMAT TO LOAD DATA FROM CSV TO RAW_DATA TABLE
CREATE TEMP FILE FORMAT "SALES_DB"."YEAR_03_04_05"."temp_file_format_2024-05-24T03:08:44.406Z"
	TYPE=CSV
    SKIP_HEADER=1
    FIELD_DELIMITER=','
    TRIM_SPACE=TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    REPLACE_INVALID_CHARACTERS=TRUE
    DATE_FORMAT=AUTO
    TIME_FORMAT=AUTO
    TIMESTAMP_FORMAT=AUTO; 

-- LOADING DATA FROM CSV TO RAW_DATA TABLE USING FILE FORMAT
COPY INTO "SALES_DB"."YEAR_03_04_05"."RAW_DATA" 
FROM (SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25
	FROM '@"SALES_DB"."YEAR_03_04_05"."__snowflake_temp_import_files__"') 
FILES = ('2024-05-24T03:08:42.913Z/Data_set.csv') 
FILE_FORMAT = '"SALES_DB"."YEAR_03_04_05"."temp_file_format_2024-05-24T03:08:44.406Z"' 
ON_ERROR=ABORT_STATEMENT 

-- MISSING VALUE CHECK FOR ORDER NUMBER
CREATE TABLE ERROR_LOG_TABLE (
    ERROR_DESCRIPTION VARCHAR(500));
    
INSERT INTO ERROR_LOG_TABLE (ERROR_DESCRIPTION)
SELECT 'Missing values found in RAW_DATA'
WHERE EXISTS (
    SELECT 1 FROM SALES_DB.YEAR_03_04_05.RAW_DATA
    WHERE ORDERNUMBER IS NULL
);

-- DUPLICATE CHECK FO+R SALES BY ORDERNUMBER AND PRODUCT CODE
INSERT INTO ERROR_LOG_TABLE (ERROR_DESCRIPTION)
SELECT 'Duplicate records found in RAW_DATA'
FROM (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY ORDERNUMBER, PRODUCTCODE ORDER BY ORDERNUMBER) AS RN
    FROM SALES_DB.YEAR_03_04_05.RAW_DATA
) WHERE RN > 1;

-- CREATING DIMENSIONAL TABLES
-- DIM_CUSTOMERS ,DIM_PRODUCTS ,DIM_DATE  
-- CREATING DIM_CUSTOMER_ADDRESS TABLE
CREATE OR REPLACE TABLE SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS (
    CUSTOMER_ID NUMBER AUTOINCREMENT,
    CUSTOMERNAME VARCHAR(100),
    PHONE VARCHAR(20),
    ADDRESSLINE1 VARCHAR(255),
    ADDRESSLINE2 VARCHAR(255),
    CITY VARCHAR(50),
    STATE VARCHAR(50),
    POSTALCODE VARCHAR(20),
    COUNTRY VARCHAR(50),
    PRIMARY KEY (CUSTOMER_ID)
);

-- CREATING DIM_PRODUCTS TABLE
CREATE OR REPLACE TABLE SALES_DB.YEAR_03_04_05.DIM_PRODUCTS (
    PRODUCT_ID NUMBER AUTOINCREMENT,
    PRODUCTCODE VARCHAR(50),
    PRODUCTLINE VARCHAR(50),
    MSRP NUMBER,
    PRIMARY KEY (PRODUCT_ID)
);

-- CREATING DIM_DATE TABLE
CREATE OR REPLACE TABLE SALES_DB.YEAR_03_04_05.DIM_DATE (
    DATE_ID DATE PRIMARY KEY,
    DAY NUMBER,
    MONTH NUMBER,
    QUARTER NUMBER,
    YEAR NUMBER
);

-- CREATING FACT_SALES TABLE
CREATE OR REPLACE TABLE SALES_DB.YEAR_03_04_05.FACT_SALES (
    ORDER_ID NUMBER AUTOINCREMENT,
    ORDERNUMBER NUMBER,
    PRODUCT_ID NUMBER,
    CUSTOMER_ID NUMBER,
    DATE_ID DATE,
    QUANTITYORDERED NUMBER,
    PRICEEACH NUMBER(10, 2),
    SALES NUMBER(10, 2),
    ORDERLINENUMBER NUMBER,
    DEALSIZE VARCHAR(20),
    STATUS VARCHAR(50),
    PRIMARY KEY (ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES DIM_PRODUCTS(PRODUCT_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES DIM_CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (DATE_ID) REFERENCES DIM_DATE(DATE_ID)
)
CLUSTER BY (YEAR(DATE_ID));

-- POPULATING DIM_CUSTOMERS TABLE
INSERT INTO SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS (
    CUSTOMERNAME, PHONE, ADDRESSLINE1, ADDRESSLINE2, CITY, STATE, POSTALCODE, COUNTRY
)
SELECT DISTINCT
    CUSTOMERNAME, PHONE, ADDRESSLINE1, ADDRESSLINE2, CITY, STATE, POSTALCODE, COUNTRY
FROM SALES_DB.YEAR_03_04_05.RAW_DATA;

-- POPULATING DIM_PRODUCTS TABLE
INSERT INTO SALES_DB.YEAR_03_04_05.DIM_PRODUCTS (PRODUCTCODE, PRODUCTLINE, MSRP)
SELECT DISTINCT PRODUCTCODE, PRODUCTLINE, MSRP
FROM SALES_DB.YEAR_03_04_05.RAW_DATA;

-- POPULATING DIM_DATE TABLE
INSERT INTO SALES_DB.YEAR_03_04_05.DIM_DATE (DATE_ID, DAY, MONTH, QUARTER, YEAR)
SELECT DISTINCT 
    TO_TIMESTAMP(ORDERDATE, 'MM/DD/YYYY HH24:MI')::DATE AS DATE_ID,
    EXTRACT(DAY FROM TO_TIMESTAMP(ORDERDATE, 'MM/DD/YYYY HH24:MI')) AS DAY,
    EXTRACT(MONTH FROM TO_TIMESTAMP(ORDERDATE, 'MM/DD/YYYY HH24:MI')) AS MONTH,
    EXTRACT(QUARTER FROM TO_TIMESTAMP(ORDERDATE, 'MM/DD/YYYY HH24:MI')) AS QUARTER,
    EXTRACT(YEAR FROM TO_TIMESTAMP(ORDERDATE, 'MM/DD/YYYY HH24:MI')) AS YEAR
FROM SALES_DB.YEAR_03_04_05.RAW_DATA;

-- POPULATING FACT_SALES TABLE
INSERT INTO SALES_DB.YEAR_03_04_05.FACT_SALES (
    ORDERNUMBER, PRODUCT_ID, CUSTOMER_ID, DATE_ID, QUANTITYORDERED, PRICEEACH, SALES, ORDERLINENUMBER, DEALSIZE, STATUS
)
SELECT DISTINCT
    ORDERNUMBER,
    DP.PRODUCT_ID,
    DC.CUSTOMER_ID,
    TO_TIMESTAMP(RD.ORDERDATE, 'MM/DD/YYYY HH24:MI')::DATE AS DATE_ID,
    QUANTITYORDERED,
    PRICEEACH,
    SALES,
    ORDERLINENUMBER,
    DEALSIZE,
    STATUS
FROM SALES_DB.YEAR_03_04_05.RAW_DATA RD
JOIN SALES_DB.YEAR_03_04_05.DIM_PRODUCTS DP ON RD.PRODUCTCODE = DP.PRODUCTCODE
JOIN SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS DC ON RD.CUSTOMERNAME = DC.CUSTOMERNAME AND RD.PHONE = DC.PHONE
JOIN SALES_DB.YEAR_03_04_05.DIM_DATE DD ON TO_TIMESTAMP(RD.ORDERDATE, 'MM/DD/YYYY HH24:MI')::DATE = DD.DATE_ID;

-- CREATING VIEWS VW_SALES_SUMMARY, VW_SALES_BY_PRODUCT, VW_SALES_BY_CUSTOMER, VW_POTENTIAL_SALES_USING_MSRP, VW_QUARTERLY_SALES_BY_REGION, VW_QUARTERLY_SALES_REVENUE, VW_COUNTRY_PERFORMANCE_BY_YEAR, VW_SALES_BY_STATUS
-- VIEW OF SALES SUMMARY AS VW_SALES_SUMMARY 
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_SALES_SUMMARY AS
SELECT 
    SUM(SALES) AS TOTAL_SALES,
    COUNT(DISTINCT ORDERNUMBER) AS TOTAL_ORDERS,
    COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_CUSTOMERS
FROM SALES_DB.YEAR_03_04_05.FACT_SALES;

-- VIEW OF SALES SUMMARY AS VW_SALES_BY_PRODUCT
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_SALES_BY_PRODUCT AS
SELECT 
    DP.PRODUCTLINE,
    DP.PRODUCTCODE,
    SUM(FS.SALES) AS TOTAL_SALES,
    SUM(FS.QUANTITYORDERED) AS TOTAL_QUANTITY
FROM SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN SALES_DB.YEAR_03_04_05.DIM_PRODUCTS DP ON FS.PRODUCT_ID = DP.PRODUCT_ID
GROUP BY DP.PRODUCTLINE, DP.PRODUCTCODE;

-- VIEW OF SALES SUMMARY AS VW_SALES_BY_CUSTOMER
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_SALES_BY_CUSTOMER AS
SELECT 
    DC.CUSTOMERNAME,
    SUM(FS.SALES) AS TOTAL_SALES,
    COUNT(FS.ORDERNUMBER) AS TOTAL_ORDERS
FROM SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS DC ON FS.CUSTOMER_ID = DC.CUSTOMER_ID
GROUP BY DC.CUSTOMERNAME;

-- VIEW OF SALES SUMMARY AS VW_POTENTIAL_SALES_USING_MSRP
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_POTENTIAL_SALES_USING_MSRP AS
SELECT 
    FS.ORDERNUMBER,
    DP.PRODUCTLINE,
    DP.PRODUCTCODE,
    FS.QUANTITYORDERED,
    DP.MSRP,
    FS.QUANTITYORDERED * DP.MSRP AS POTENTIAL_SALES,
    FS.SALES AS ACTUAL_SALES,
    FS.SALES - (FS.QUANTITYORDERED * DP.MSRP) AS DIFFERENCE
FROM 
    SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_PRODUCTS DP ON FS.PRODUCT_ID = DP.PRODUCT_ID;

    -- VIEW OF SALES SUMMARY AS VW_QUARTERLY_SALES_BY_REGION
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_QUARTERLY_SALES_BY_REGION AS
SELECT 
    DD.YEAR,
    DD.QUARTER,
    DC.COUNTRY,
    COUNT(FS.ORDERNUMBER) AS TOTAL_ORDERS,
    SUM(FS.QUANTITYORDERED) AS TOTAL_QUANTITY
FROM 
    SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_DATE DD ON FS.DATE_ID = DD.DATE_ID
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS DC ON FS.CUSTOMER_ID = DC.CUSTOMER_ID
GROUP BY 
    DD.YEAR, DD.QUARTER, DC.COUNTRY
ORDER BY 
    DD.YEAR, DD.QUARTER, DC.COUNTRY;

-- VIEW OF SALES SUMMARY AS VW_QUARTERLY_SALES_REVENUE
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_QUARTERLY_SALES_REVENUE AS
SELECT 
    DD.YEAR,
    DD.QUARTER,
    SUM(FS.SALES) AS TOTAL_SALES_REVENUE
FROM 
    SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_DATE DD ON FS.DATE_ID = DD.DATE_ID
GROUP BY 
    DD.YEAR, DD.QUARTER
ORDER BY 
    DD.YEAR, DD.QUARTER;

-- VIEW OF SALES SUMMARY AS VW_COUNTRY_PERFORMANCE_BY_YEAR
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_COUNTRY_PERFORMANCE_BY_YEAR AS
SELECT 
    DD.YEAR,
    DC.COUNTRY,
    SUM(FS.SALES) AS TOTAL_SALES,
    SUM(FS.QUANTITYORDERED) AS TOTAL_QUANTITY,
    COUNT(DISTINCT FS.ORDERNUMBER) AS TOTAL_ORDERS
FROM 
    SALES_DB.YEAR_03_04_05.FACT_SALES FS
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_DATE DD ON FS.DATE_ID = DD.DATE_ID
JOIN 
    SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS DC ON FS.CUSTOMER_ID = DC.CUSTOMER_ID
GROUP BY 
    DD.YEAR, DC.COUNTRY
ORDER BY 
    DD.YEAR, DC.COUNTRY;

-- VIEW OF SALES SUMMARY AS VW_SALES_BY_STATUS
CREATE OR REPLACE VIEW SALES_DB.YEAR_03_04_05.VW_SALES_BY_STATUS AS
SELECT 
    STATUS,
    SUM(SALES) AS TOTAL_SALES,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS,
    COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_CUSTOMERS
FROM 
    SALES_DB.YEAR_03_04_05.FACT_SALES
GROUP BY 
    STATUS;

-- DATA VALIDATION CHECKS AFTER LOADING
-- DIMENSIONAL TABLES AND FACT TABLE DUPLICATE CHECKS
SELECT CUSTOMERNAME, REGEXP_REPLACE(PHONE, '[^\d+]', '') AS CLEANED_PHONE, COUNT(*) AS DUPLICATE_COUNT
FROM SALES_DB.YEAR_03_04_05.DIM_CUSTOMERS
GROUP BY CUSTOMERNAME, REGEXP_REPLACE(PHONE, '[^\d+]', '')
HAVING COUNT(*) > 1;

SELECT PRODUCTCODE, COUNT(*) AS DUPLICATE_COUNT
FROM SALES_DB.YEAR_03_04_05.DIM_PRODUCTS
GROUP BY PRODUCTCODE
HAVING COUNT(*) > 1;

SELECT DATE_ID, COUNT(*) AS DUPLICATE_COUNT
FROM SALES_DB.YEAR_03_04_05.DIM_DATE
GROUP BY DATE_ID
HAVING COUNT(*) > 1;

SELECT ORDERNUMBER, PRODUCT_ID, CUSTOMER_ID, DATE_ID, COUNT(*) AS DUPLICATE_COUNT
FROM SALES_DB.YEAR_03_04_05.FACT_SALES
GROUP BY ORDERNUMBER, PRODUCT_ID, CUSTOMER_ID, DATE_ID
HAVING COUNT(*) > 1;


