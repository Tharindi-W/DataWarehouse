Data Warehouse Solution
1. Outline of the dataset
This dataset illustrates the sales data of a business which could be used to get insights into the business to
increase sales, improve profitability, enhance customer satisfaction, and make informed decisions. It
consists of 25 columns, encompassing essential information. In total, there are 2823 entries. The dataset
showcases 18 distinct orderline numbers and 6 distinct status categories. Among 2823 orders, 2617 were
successfully Shipped. The sales data spans the years 2003 to 2005, covering 7 distinct product lines
distributed across 19 countries. Deal sizes are categorized as Medium, Small, and Large. Furthermore, the
dataset comprises 92 unique customers and 109 distinct product IDs. A Python script was used to obtain
these results.
2. Data Warehouse Design
According to the given sales data, a data warehouse solution was developed to extract raw data from
different sources and transform, and store them to efficiently retrieve necessary data for reporting, analysis
and to create dashboards to get insights. This process includes designing the solution architect, entity
relationship diagram, and more which are further discussed below.
2.1 Data Architecture
The following points illustrate the key steps followed in data architecture solution,
1. Data Sources - This architecture can ingest data from various sources as shown in Datawarehouse Architecture,
including CSV and JSON files, raw data feeds, and cloud providers like AWS, Azure, and Google
Cloud. This flexibility allows you to integrate data from a wide range of sources.
2. Data Processing and Storage - This design uses Snowflake as the core data warehouse platform.
Snowflake provides a multi-stage approach.
a. Staging - Raw data is initially landed in Snowflake's temporary storage for processing using
external stages and file formats.
b. Conformed Dimensions - Standardized reference data tables are created to ensure
consistency across the warehouse.
c. Aggregated Data - Pre-calculated summaries of detailed data are stored in Snowflake views
for faster querying.
3. Services - This layer focuses on data consumption and analysis
a. Dashboards - Interactive dashboards for visualizing key metrics and trends.
b. Reporting - Tools for generating detailed reports based on data warehouse queries.
c. Analysis - Capabilities for advanced data analysis and exploration.
d. Power BI - Integration with Power BI for further data manipulation and visualization.
4. Governance and Operations - This layer ensures the smooth operation and security of the data
warehouse.
a. Resource Monitor - Tracks and controls resource usage within Snowflake.
b. Error Logs - Captures and logs errors into a separate table for troubleshooting purposes.
c. User Roles - Defines access permissions for different user groups within the data
warehouse.
2.2 Entity-Relationship Diagram
The Entity-Relationship Diagram (ERD) showcases the structure of the data warehouse
designed for sales analysis. It consists of five tables: RAW_DATA (stores raw sales data),
DIM_CUSTOMERS (unique customers), DIM_PRODUCTS (unique products), DIM_DATE (extracted
dates), and FACT_SALES (integrated sales data). Dimension tables hold unique values, while the fact table
has foreign keys connecting them, and the data types.
2.3 Advantages of using Snowflake
There are several reasons to choose Snowflake as the Data warehouse(DWs) solution instead of traditional
DWs. Following are some key points.
● Scalability - It is a cloud-based solution that scales automatically based on needs.
● Cost-Effectiveness - It uses a pay-as-you-go model, which is beneficial for datasets that might
fluctuate in size.
● Performance - Performance efficient and can handle large datasets efficiently.
● Ease of Use - It is a managed service, which manages infrastructure and software.
● Security - It offers robust security features to protect data.
2.4 Insights from Sales Data Warehouse
1. Product Analysis
a. Product Profitability - Identify high performing products based on sales figures and compare
them to retail prices to understand profitability. (VW_SALES_BY_PRODUCT,
VW_POTENTIAL_SALES_USING_MSRP)
b. Product Demand - Analyze sales trends by product line and year
(VW_SALES_BY_PRODUCT) to understand changing customer preferences and identify
potential areas for product development or marketing focus.
c. Product Performance by Region - Compare sales figures for specific products across
different countries (VW_SALES_BY_PRODUCT,
VW_COUNTRY_PERFORMANCE_BY_YEAR) to identify regional variations in demand.
2. Customer Analysis
a. Customer Lifetime Value - Analyze customer purchase patterns (number of orders, average
order value) to identify high-value customers and personalize their experience.
(VW_SALES_BY_CUSTOMER)
3. Sales Performance
a. Sales Trends - Identify seasonal or cyclical trends in sales data
(VW_QUARTERLY_SALES_BY_REGION, VW_QUARTERLY_SALES_REVENUE) to
optimize inventory management and marketing efforts.
b. Order Fulfillment Efficiency - Analyze order status data (VW_SALES_BY_STATUS) to
identify any bottlenecks in the fulfillment process and improve efficiency.
These insights are crucial for making data-driven decisions that can improve overall business performance.
By understanding your customers, product performance, and sales trends to,
■ Increase Sales
■ Improve Profitability
■ Enhance Customer Satisfaction
■ Make Informed Decisions
3. Script Development for Table Derivation
The following describes the approach used for data modeling using a SQL script,
1. Schema and database creation - Created a warehouse named "VEHICLE_DEALER" and a
database named "SALES_DB", a schema named "YEAR_03_04_05" to organize the tables for data
on the years 2003, 2004, and 2005.
2. Loading data as RAW - Created a table named "RAW_DATA" within the "YEAR_03_04_05" schema
to store the raw sales data. File format was created to facilitate loading data from CSV files into the
"RAW_DATA" table. Then checked for missing values, logged errors and duplicate records
3. Dimensional table creation
a. DIM_CUSTOMERS for customer details.
b. DIM_PRODUCTS for product details.
c. DIM_DATE for date-related information.
4. Fact table creation - Created a fact table named "FACT_SALES" to store sales transactions.
Established foreign key relationships with dimensional tables to maintain data integrity. Clustered
the table by the year of the transaction date to optimize query performance.
5. View creation for easy data analysis as mentioned in 2.4
6. Data Validation Checks - Implemented data validation queries to identify duplicates in dimensional
and fact tables, ensuring data integrity.
7. Resource monitor setup and ownership
a. Created a resource monitor with daily credit limits and trigger warnings to control the usage
of credits
b. Ownership of tables is for only account admins and organization admins
c. Ownership of views is for sysadmins.
4. Power BI Dashboard Creation
This Power BI dashboard gives basic and most important insights from different
aspects as,
1. Sales Overview
a. Number of orders made
b. Minimum, maximum, and average sales of all products
2. Sales by Product
a. Sales by year for each product line
b. Sales by product line
c. Number of product codes in each product line
d. Average sales price and retail price of each product line
3. Sales by Other Dimensions
a. Sales by countries
b. Sales by order status
